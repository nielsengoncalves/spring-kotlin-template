/*
 * This file is generated by jOOQ.
 */
package com.example.template.db.tables


import com.example.template.db.Public
import com.example.template.db.tables.records.UsersRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Users(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersRecord>?,
    aliased: Table<UsersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.users</code>
         */
        val USERS: Users = Users()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersRecord> = UsersRecord::class.java

    /**
     * The column <code>public.users.id</code>.
     */
    val ID: TableField<UsersRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.users.github_username</code>.
     */
    val GITHUB_USERNAME: TableField<UsersRecord, String?> = createField(DSL.name("github_username"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.users.name</code>.
     */
    val NAME: TableField<UsersRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.users.company</code>.
     */
    val COMPANY: TableField<UsersRecord, String?> = createField(DSL.name("company"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.users.location</code>.
     */
    val LOCATION: TableField<UsersRecord, String?> = createField(DSL.name("location"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.users.bio</code>.
     */
    val BIO: TableField<UsersRecord, String?> = createField(DSL.name("bio"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.users.is_available_for_hiring</code>.
     */
    val IS_AVAILABLE_FOR_HIRING: TableField<UsersRecord, Boolean?> = createField(DSL.name("is_available_for_hiring"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.users.created_at</code>.
     */
    val CREATED_AT: TableField<UsersRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.users.updated_at</code>.
     */
    val UPDATED_AT: TableField<UsersRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<UsersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.users</code> table reference
     */
    constructor(): this(DSL.name("users"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<UsersRecord> = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), arrayOf(Users.USERS.ID), true)
    override fun getUniqueKeys(): List<UniqueKey<UsersRecord>> = listOf(
        Internal.createUniqueKey(Users.USERS, DSL.name("users_github_username_key"), arrayOf(Users.USERS.GITHUB_USERNAME), true)
    )
    override fun `as`(alias: String): Users = Users(DSL.name(alias), this)
    override fun `as`(alias: Name): Users = Users(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Users = Users(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Users = Users(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<UUID?, String?, String?, String?, String?, String?, Boolean?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row9<UUID?, String?, String?, String?, String?, String?, Boolean?, LocalDateTime?, LocalDateTime?>
}
